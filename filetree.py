import os
import datetime

def get_file_emoji(file_name):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞.
    """
    file_types = {
        'dir': 'üìÇ',  # –ü–∞–ø–∫–∏
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        '.txt': 'üìÑ', '.doc': 'üìÑ', '.docx': 'üìÑ', '.pdf': 'üìÑ', '.rtf': 'üìÑ',
        '.md': 'üìÑ', '.log': 'üìÑ', '.odt': 'üìÑ', '.tex': 'üìÑ',
        # –ö–æ–¥ –∏ —Å–∫—Ä–∏–ø—Ç—ã
        '.py': 'üêç', '.java': '‚òï', '.cpp': 'üíª', '.c': 'üíª', '.js': 'üåê',
        '.html': 'üåê', '.css': 'üé®', '.php': 'üåê', '.rb': 'üíé',
        '.sh': 'üêö', '.go': 'üêπ', '.ts': 'üåê', '.sql': 'üóÑÔ∏è',
        # –ú—É–∑—ã–∫–∞
        '.mp3': 'üéµ', '.wav': 'üéµ', '.flac': 'üéµ', '.aac': 'üéµ',
        '.ogg': 'üéµ', '.m4a': 'üéµ',
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        '.jpg': 'üñºÔ∏è', '.jpeg': 'üñºÔ∏è', '.png': 'üñºÔ∏è', '.gif': 'üñºÔ∏è',
        '.bmp': 'üñºÔ∏è', '.tiff': 'üñºÔ∏è', '.svg': 'üñºÔ∏è', '.webp': 'üñºÔ∏è',
        # –í–∏–¥–µ–æ
        '.mp4': 'üé•', '.mkv': 'üé•', '.avi': 'üé•', '.mov': 'üé•',
        '.wmv': 'üé•', '.flv': 'üé•', '.webm': 'üé•',
        # –ê—Ä—Ö–∏–≤—ã
        '.zip': 'üóÉÔ∏è', '.rar': 'üóÉÔ∏è', '.7z': 'üóÉÔ∏è', '.tar': 'üóÉÔ∏è',
        '.gz': 'üóÉÔ∏è', '.bz2': 'üóÉÔ∏è',
        # –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã
        '.exe': '‚öôÔ∏è', '.bin': '‚öôÔ∏è', '.app': '‚öôÔ∏è', '.bat': '‚öôÔ∏è',
        # –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
        '.xls': 'üìä', '.xlsx': 'üìä', '.csv': 'üìä', '.ods': 'üìä',
        '.ppt': 'üìà', '.pptx': 'üìà',
        # –î—Ä—É–≥–∏–µ
        '.iso': 'üíø', '.torrent': 'üåä', '.db': 'üóÑÔ∏è', '.json': 'üìã',
        '.xml': 'üìã', '.yaml': 'üìã', '.yml': 'üìã'
    }
    
    if os.path.isdir(file_name):
        return file_types['dir']
    
    extension = os.path.splitext(file_name)[1].lower()
    return file_types.get(extension, 'üìú')  # üìú –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤

def print_file_tree(path, prefix="", file_output=None, print_to_console=True, sort_key='name'):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏—Ç –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫, –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã, —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é.
    
    Args:
        path (str): –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        prefix (str): –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤
        file_output (file): –§–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        print_to_console (bool): –í—ã–≤–æ–¥–∏—Ç—å –ª–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
        sort_key (str): –ö—Ä–∏—Ç–µ—Ä–∏–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ('name', 'ctime', 'size')
    
    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –µ—ë –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
    """
    total_files = 0
    try:
        items = os.listdir(path)
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –∏ –ø–∞–ø–∫–∞—Ö
        item_info = []
        for item in items:
            item_path = os.path.join(path, item)
            try:
                stats = os.stat(item_path)
                item_info.append({
                    'name': item,
                    'path': item_path,
                    'ctime': stats.st_ctime,
                    'size': stats.st_size if os.path.isfile(item_path) else 0,
                    'is_dir': os.path.isdir(item_path)
                })
            except (PermissionError, FileNotFoundError):
                continue

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        if sort_key == 'ctime':
            items = [x['name'] for x in sorted(item_info, key=lambda x: x['ctime'], reverse=True)]
        elif sort_key == 'size':
            items = [x['name'] for x in sorted(item_info, key=lambda x: (x['is_dir'], x['size']), reverse=True)]
        else:  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ –∏–º–µ–Ω–∏
            items = [x['name'] for x in sorted(item_info, key=lambda x: x['name'].lower())]

    except (PermissionError, FileNotFoundError) as e:
        error_msg = f"{prefix}‚îú‚îÄ‚îÄ [–û—à–∏–±–∫–∞: {e}]"
        if print_to_console:
            print(f"\033[1;31m{error_msg}\033[0m")
        if file_output:
            file_output.write(error_msg + "\n")
        return 0

    dir_file_count = 0  # –°—á—ë—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    for index, item in enumerate(items):
        item_path = os.path.join(path, item)
        is_last = index == len(items) - 1
        connector = "‚îî‚îÄ‚îÄ " if is_last else "‚îú‚îÄ‚îÄ "
        emoji = get_file_emoji(item_path)
        
        # –ü–æ–¥—Å—á—ë—Ç —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if os.path.isfile(item_path):
            dir_file_count += 1
            total_files += 1
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏ –∑–∞–ø–∏—Å–∏
        line = f"{prefix}{connector}{emoji} {item}"
        if os.path.isdir(item_path):
            subdir_files = print_file_tree(item_path, prefix + ("    " if is_last else "‚îÇ   "), file_output, print_to_console, sort_key)
            total_files += subdir_files
            line += f" ({subdir_files} —Ñ–∞–π–ª–æ–≤)"

        if print_to_console:
            print(f"\033[1;37m{line}\033[0m")
        if file_output:
            file_output.write(line + "\n")

    return total_files

def main():
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    print("\033[1;34m=== –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤ ===\033[0m")
    path = input("\033[1;32m–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Ç–µ–∫—É—â–µ–π): \033[0m").strip()
    
    # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if not path:
        path = os.getcwd()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—É—Ç—å
    if not os.path.exists(path):
        print(f"\033[1;31m–û—à–∏–±–∫–∞: –ü—É—Ç—å '{path}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\033[0m")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π
    if not os.path.isdir(path):
        print(f"\033[1;31m–û—à–∏–±–∫–∞: '{path}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π!\033[0m")
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–≤–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å
    print("\033[1;32m–í—ã–≤–æ–¥–∏—Ç—å –¥–µ—Ä–µ–≤–æ –≤ –∫–æ–Ω—Å–æ–ª—å?\033[0m")
    print("1 - –î–∞")
    print("2 - –ù–µ—Ç")
    console_choice = input("\033[1;32m–í—ã–±–µ—Ä–∏—Ç–µ (1 –∏–ª–∏ 2, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1): \033[0m").strip()
    print_to_console = console_choice != '2'

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    print("\033[1;32m–ö–∞–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏?\033[0m")
    print("1 - –ü–æ –∏–º–µ–Ω–∏ (–∞–ª—Ñ–∞–≤–∏—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)")
    print("2 - –ü–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)")
    print("3 - –ü–æ —Ä–∞–∑–º–µ—Ä—É (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)")
    sort_choice = input("\033[1;32m–í—ã–±–µ—Ä–∏—Ç–µ (1, 2 –∏–ª–∏ 3, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1): \033[0m").strip()
    sort_key = 'name'
    if sort_choice == '2':
        sort_key = 'ctime'
    elif sort_choice == '3':
        sort_key = 'size'

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º, –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª
    print("\033[1;32m–ö—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª?\033[0m")
    print(f"1 - –í —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ({path})")
    print("2 - –í –¥—Ä—É–≥—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
    save_choice = input("\033[1;32m–í—ã–±–µ—Ä–∏—Ç–µ (1 –∏–ª–∏ 2, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1): \033[0m").strip()
    
    if save_choice == '2':
        save_path = input("\033[1;32m–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: \033[0m").strip()
        if not save_path:
            print(f"\033[1;31m–û—à–∏–±–∫–∞: –ü—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ü–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ({path}).\033[0m")
            save_path = path
        elif not os.path.exists(save_path) or not os.path.isdir(save_path):
            print(f"\033[1;31m–û—à–∏–±–∫–∞: –ü—É—Ç—å '{save_path}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π!\033[0m")
            return
    else:
        save_path = path

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    output_file = os.path.join(save_path, f"file_tree_{timestamp}.txt")
    
    # –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
    if print_to_console:
        print(f"\n\033[1;36m–î–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è: {path}\033[0m")
    
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(f"–î–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è: {path}\n")
            total_files = print_file_tree(path, file_output=f, print_to_console=print_to_console, sort_key=sort_key)
            summary = f"\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: {total_files}"
            if print_to_console:
                print(f"\033[1;36m{summary}\033[0m")
            f.write(summary + "\n")
    except (PermissionError, OSError) as e:
        print(f"\033[1;31m–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: {e}\033[0m")
        return
    
    print(f"\033[1;32m–î–µ—Ä–µ–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: {output_file}\033[0m")
    print("\033[1;34m=== –ó–∞–≤–µ—Ä—à–µ–Ω–æ ===\033[0m")

if __name__ == "__main__":
    main()
